/* # MIXINS
---------------------------------------------------------------------------------------------------- */

/* ## Typography
---------------------------------------------------------------------- */

/* Basic Font Sizes mixin */
@mixin font-size($sizeValue: 1.6) {
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + rem;
}

@mixin line-height($lineheight: 1.6) {
  line-height:($lineheight * 10) + px;
  line-height:$lineheight + rem;
}

@mixin font($fontsize: 1.6, $lineheight: 1.6) {
  font-size: ($fontsize * 10) + px;
  font-size: $fontsize + rem;
  line-height:($lineheight * 10) + px;
  line-height:$lineheight + rem;
}

/* ## Responsive Typography
---------------------------------------------------------------------- */

@mixin make-font($fs-g_font) {
  @if type-of($fs-g_font) == "list" {
    font-size: (nth($fs-g_font, 1) * 10) + px;
    font-size: nth($fs-g_font, 1) + rem;
    @if (length($fs-g_font) > 1) {
      line-height: (nth($fs-g_font, 2) * 10) + px;
      line-height: nth($fs-g_font, 2) + rem;
    }
    @if (length($fs-g_font) > 2) {
      font-weight: nth($fs-g_font, 3);
    }
    @if (length($fs-g_font) > 3) {
      color: nth($fs-g_font, 4);
    }
  }
  @else {
    font-size: $fs-font-size + rem;
  }
}
@mixin font-values($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-g_font in $fs-map {
    @if $fs-breakpoint == null {
      @include make-font($fs-g_font);
    }
    @else {
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        @include make-font($fs-g_font);
      }
    }
  }
}

/* ## Responsive Gridcontainer inside wrap max width
---------------------------------------------------------------------- */
@mixin max-width-values($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-g_max_width in $fs-map {
    @if $fs-breakpoint == null {
      max-width: $fs-g_max_width;
    }
    @else {
      // If $fs-g_width is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        max-width: $fs-g_max_width;
      }
    }
  }
}

/* ## Responsive Gridcontainer top and buttom padding
---------------------------------------------------------------------- */
@mixin grid-padding-values($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-g_grid_padding in $fs-map {
    @if $fs-breakpoint == null {
      padding-top: $fs-g_grid_padding + px;
      padding-bottom: $fs-g_grid_padding + px;
    }
    @else {
      // If $fs-g_grid_padding is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        padding-top: $fs-g_grid_padding + px;
        padding-bottom: $fs-g_grid_padding + px;
      }
    }
  }
}

/* ## Responsive site margins
---------------------------------------------------------------------- */
@mixin site-margin-values($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-g_site_margin in $fs-map {
    @if $fs-breakpoint == null {
      margin: $fs-g_site_margin + px;
    }
    @else {
      // If $fs-g_site_margin is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        margin: $fs-g_site_margin + px;
      }
    }
  }
}

@mixin site-margin-left-values($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-g_site_margin_left in $fs-map {
    @if $fs-breakpoint == null {
      margin-left: $fs-g_site_margin_left + px;
    }
    @else {
      // If $fs-g_site_margin is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        margin-left: $fs-g_site_margin_left + px;
      }
    }
  }
}

@mixin site-margin-right-values($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-g_site_margin_right in $fs-map {
    @if $fs-breakpoint == null {
      margin-right: $fs-g_site_margin_right + px;
    }
    @else {
      // If $fs-g_site_margin is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        margin-right: $fs-g_site_margin_right + px;
      }
    }
  }
}

@mixin site-margin-top-values($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-g_site_margin_top in $fs-map {
    @if $fs-breakpoint == null {
      margin-top: $fs-g_site_margin_top + px;
    }
    @else {
      // If $fs-g_site_margin is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        margin-top: $fs-g_site_margin_top + px;
      }
    }
  }
}

@mixin site-margin-bottom-values($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-g_site_margin_bottom in $fs-map {
    @if $fs-breakpoint == null {
      margin-bottom: $fs-g_site_margin_bottom + px;
    }
    @else {
      // If $fs-g_site_margin is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        margin-bottom: $fs-g_site_margin_bottom + px;
      }
    }
  }
}


/* ## Border Radius
---------------------------------------------------------------------- */

@mixin corners($radius){
    -webkit-border-radius: $radius + px;
    -moz-border-radius: $radius + px;
    border-radius: $radius + px;
}

/* ## Gradients
---------------------------------------------------------------------- */

@mixin linear-gradient($from, $to) {
	/* Fallback for sad browsers */
	background-color: $to;
	/* Mozilla Firefox */
	background-image:-moz-linear-gradient($from, $to);
	/* Opera */
	background-image:-o-linear-gradient($from, $to);
	/* WebKit (Safari 4+, Chrome 1+) */
	background-image:-webkit-gradient(linear, left top, left bottom, color-stop(0, $from), color-stop(1, $to));
	/* WebKit (Chrome 11+) */
	background-image: -webkit-linear-gradient($from, $to);
	/* IE10 */
	background-image: -ms-linear-gradient($from, $to);
	/* W3C */
	background-image: linear-gradient($from, $to);
}

/* ## Grid
---------------------------------------------------------------------- */

/* Grid mixin */
@mixin collwidth($colls, $margin, $target) {
  width: ((($target - (($colls) * $margin)) / $colls) / $target) * 100%;
  margin-right: (($margin / $target / 2) * 100%);
  margin-left: (($margin / $target / 2) * 100%);
}

@mixin grid($colls, $margin, $target) {
  width: ((($target - (($colls - 1) * $margin)) / $colls) / $target) * 100%;
  &:nth-child(n) {
    margin-right: (($margin / $target) * 100%);
  }
  &:nth-child(#{$colls}n) {
    margin-right: 0;
  }
}

@mixin grid_alt($colls, $margin, $target) {
  width: ((($target - (($colls - 1) * $margin)) / $colls) / $target) * 100%;
  &:nth-child(n) {
    margin-right: (($margin / $target) * 100%);
  }
  &:nth-child(#{($colls + 1)}n) {
    margin-right: 0;
  }
}

@mixin structure($width, $target) {
	width: ($width / $target * 100%);
}